# Generated by Django 5.2.6 on 2025-09-12 14:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombres', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Este campo solo puede contener letras y espacios.', regex='^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$')], verbose_name='Nombres')),
                ('apellido_paterno', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='Este campo solo puede contener letras y espacios.', regex='^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$')], verbose_name='Apellido paterno')),
                ('apellido_materno', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(message='Este campo solo puede contener letras y espacios.', regex='^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$')], verbose_name='Apellido materno')),
                ('direccion', models.CharField(blank=True, max_length=200, verbose_name='Dirección')),
                ('fecha_nacimiento', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('ci', models.CharField(max_length=20, unique=True, verbose_name='CI')),
                ('celular', models.CharField(blank=True, max_length=8, validators=[django.core.validators.RegexValidator(message='El celular debe comenzar con 6 o 7 y tener exactamente 8 dígitos.', regex='^[67]\\d{7}$')], verbose_name='Celular')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Abogado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nro_credencial', models.CharField(max_length=50, unique=True, verbose_name='Nro. credencial')),
                ('estado_licencia', models.CharField(choices=[('VIGENTE', 'Vigente'), ('SUSPENDIDA', 'Suspendida'), ('VENCIDA', 'Vencida')], default='VIGENTE', max_length=10, verbose_name='Estado licencia')),
                ('especialidad', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Este campo solo puede contener letras y espacios.', regex='^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$')], verbose_name='Especialidad')),
                ('fecha_ingreso', models.DateField(blank=True, null=True, verbose_name='Fecha de ingreso')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='abogado', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Abogado',
                'verbose_name_plural': 'Abogados',
            },
        ),
        migrations.CreateModel(
            name='Auxiliar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('especialidad', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Este campo solo puede contener letras y espacios.', regex='^[A-Za-zÁÉÍÓÚáéíóúÑñ\\s]+$')], verbose_name='Especialidad')),
                ('horario', models.CharField(blank=True, max_length=100, verbose_name='Horario')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auxiliares', to='accounts.abogado')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auxiliar', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Auxiliar',
                'verbose_name_plural': 'Auxiliares',
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_cliente', models.CharField(choices=[('PERSONA', 'Persona'), ('EMPRESA', 'Empresa')], default='PERSONA', max_length=10, verbose_name='Tipo de cliente')),
                ('nombre_empresa', models.CharField(blank=True, max_length=150, verbose_name='Nombre empresa')),
                ('historial', models.TextField(blank=True, verbose_name='Historial')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cliente', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['ci'], name='accounts_us_ci_500acc_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['apellido_paterno', 'apellido_materno', 'nombres'], name='accounts_us_apellid_844f4b_idx'),
        ),
    ]
