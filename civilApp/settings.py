"""
Django settings for civilApp project.

Generated by 'django-admin startproject' using Django 5.2.6.

Más info:
https://docs.djangoproject.com/en/5.2/topics/settings/
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from google.oauth2 import service_account 
from pathlib import Path
import os
import environ #
# === Paths ===
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env(
    GS_BUCKET_NAME=(str, ''),
    GS_PROJECT_ID=(str, ''),
    GS_CREDENTIALS_PATH=(str, ''),
)
# >>>> ADD THIS LINE <<<<
# Lee el archivo .env si existe
environ.Env.read_env(BASE_DIR / '.env')
# === Seguridad (IMPORTANTE en producción) ===
SECRET_KEY = 'django-insecure-eq$c3^lr17r6btsvw^fh2@@cg73a)m#u*h!@&5@$i*mz@3buz)'
DEBUG = True
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# === Aplicaciones instaladas ===
INSTALLED_APPS = [
    # Django apps por defecto
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Tus apps
    'pages',
    'accounts',
    'gestdocu','visualizacion_expedientes','storages',
]


# === Middleware ===
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# === Configuración de URLs y WSGI ===
ROOT_URLCONF = 'civilApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Directorio global de templates
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',   # útil en dev
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'civilApp.wsgi.application'


# === Base de datos (PostgreSQL) ===
# === Base de datos (PostgreSQL) ===
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'gestdocum'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# === Validación de contraseñas ===
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# === Usuario personalizado ===
AUTH_USER_MODEL = 'accounts.User'


# === Internacionalización ===
LANGUAGE_CODE = 'es'          # 👈 mejor en español
TIME_ZONE = 'America/La_Paz'
USE_I18N = True
USE_TZ = True


# === Archivos estáticos (CSS, JS, imágenes globales) ===
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']  # carpeta global de estáticos
STATIC_ROOT = BASE_DIR / 'staticfiles'    # para producción (collectstatic)


# === Archivos subidos por usuarios (MEDIA) ===
MEDIA_URL = '/media/'
# MEDIA_ROOT ya no se usa cuando se configura STORAGES para 'default'

# === Configuración MODERNA para Google Cloud Storage (GCS) ===
# Usa GCS para el almacenamiento de archivos, tanto en desarrollo como en producción.
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            "bucket_name": env("GS_BUCKET_NAME"),
            "project_id": env("GS_PROJECT_ID"),
            # Añade esta línea para cargar las credenciales directamente
            "credentials": service_account.Credentials.from_service_account_file(
                env('GS_CREDENTIALS_PATH')
            ) if env('GS_CREDENTIALS_PATH') else None,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

GS_CREDENTIALS_PATH = env('GS_CREDENTIALS_PATH')
if GS_CREDENTIALS_PATH:
    # Convierte a ruta absoluta para evitar problemas
    cred_path = BASE_DIR / GS_CREDENTIALS_PATH
    if cred_path.exists():
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(cred_path)
        print(f"[DEBUG] Credenciales cargadas desde: {cred_path}") # <-- Línea de depuración
    else:
        print(f"[ERROR] Archivo de credenciales NO ENCONTRADO en: {cred_path}") # <-- Línea de depuración
        # Opcional: Lanza un error para detener la ejecución si las credenciales son críticas
        # raise FileNotFoundError(f"Archivo de credenciales no encontrado: {cred_path}")




# === Configuración por defecto de clave primaria ===
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirecciones de login/logout
LOGIN_REDIRECT_URL = "/dashboard/"   # a dónde se redirige tras iniciar sesión
LOGOUT_REDIRECT_URL = "pages:home"

